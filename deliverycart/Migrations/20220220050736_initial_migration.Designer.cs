// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using deliverycart.Data;

#nullable disable

namespace deliverycart.Migrations
{
    [DbContext(typeof(Assignment3XTestsContext))]
    [Migration("20220220050736_initial_migration")]
    partial class initial_migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.2");

            modelBuilder.Entity("deliverycart.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("bankAccountNum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("bankRoutingNum")
                        .HasColumnType("INTEGER");

                    b.Property<string>("delivAdd")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("zipCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("CustomerID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("deliverycart.Models.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VendorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("itemName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("itemQty")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemID");

                    b.HasIndex("VendorID");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("deliverycart.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShopperID")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ItemID");

                    b.HasIndex("ShopperID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("deliverycart.Models.Shopper", b =>
                {
                    b.Property<int>("ShopperID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ManagerShopperID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SSN")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("bankAccountNum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("bankRoutingNum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("deliveryInfo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("zipCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("ShopperID");

                    b.HasIndex("ManagerShopperID");

                    b.ToTable("Shopper");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Shopper");
                });

            modelBuilder.Entity("deliverycart.Models.Vendor", b =>
                {
                    b.Property<int>("VendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("bankAccountNum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("bankRoutingNum")
                        .HasColumnType("INTEGER");

                    b.Property<string>("storeAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("storeCity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("storeState")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("storeZip")
                        .HasColumnType("INTEGER");

                    b.Property<int>("zipCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("VendorID");

                    b.HasIndex("ItemID");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("deliverycart.Models.Manager", b =>
                {
                    b.HasBaseType("deliverycart.Models.Shopper");

                    b.Property<int>("ManagerID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("pwd")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("deliverycart.Models.Item", b =>
                {
                    b.HasOne("deliverycart.Models.Vendor", null)
                        .WithMany("Items")
                        .HasForeignKey("VendorID");
                });

            modelBuilder.Entity("deliverycart.Models.Order", b =>
                {
                    b.HasOne("deliverycart.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("deliverycart.Models.Item", "Item")
                        .WithMany("Order")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("deliverycart.Models.Shopper", null)
                        .WithMany("Orders")
                        .HasForeignKey("ShopperID");

                    b.Navigation("Customer");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("deliverycart.Models.Shopper", b =>
                {
                    b.HasOne("deliverycart.Models.Manager", "Manager")
                        .WithMany("Shopper")
                        .HasForeignKey("ManagerShopperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("deliverycart.Models.Vendor", b =>
                {
                    b.HasOne("deliverycart.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("deliverycart.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("deliverycart.Models.Item", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("deliverycart.Models.Shopper", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("deliverycart.Models.Vendor", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("deliverycart.Models.Manager", b =>
                {
                    b.Navigation("Shopper");
                });
#pragma warning restore 612, 618
        }
    }
}
